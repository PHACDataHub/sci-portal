---
app:
  title: Data Science Portal
  baseUrl: http://localhost:3000

organization:
  name: PHAC

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

  # Configuration for custom plugins
  plugins:
    provisioner:
      repo:
        owner: ${GITOPS_REPO_OWNER}
        name: ${GITOPS_REPO_NAME}
      templateDir: './templates'

integrations:
  github:
    ### Use a GitHub App for authentication. See https://backstage.io/docs/integrations/github/github-apps.
    - host: github.com
      apps:
        - $include: github-app-integration-credentials.yaml

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

# See https://backstage.io/docs/auth/ to learn about auth providers
auth:
  environment: development
  providers:
    google:
      development:
        clientId: ${AUTH_GOOGLE_CLIENT_ID}
        clientSecret: ${AUTH_GOOGLE_CLIENT_SECRET}

  # We configure a custom sign-in resolver until we can manage Users and Groups with Secure LDAP.
  # See https://backstage.io/docs/auth/identity-resolver#sign-in-without-users-in-the-catalog
  allowedDomains: ${AUTH_GOOGLE_ALLOWED_DOMAINS}

# Sign in without a pop-up. See https://backstage.io/docs/auth/#sign-in-configuration.
enableExperimentalRedirectFlow: true

costInsights:
  engineerCost: 200000
  products:
    projectBudgets:
      name: Project Budgets
      # icon:
    costCentres:
      name: Cost Centres
  baseCurrency:
    locale: en-US
    options:
      currency: CAD
      minimumFractionDigits: 3

catalog:
  readonly: true
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Backstage entities
    - type: file
      target: ../../catalog/entities.yaml
      rules:
        - allow: [System, User, Group]

    # Resource Provisioner template
    - type: file
      target: ../../templates/catalog-info.yaml
      rules:
        - allow: [Location, Template]
