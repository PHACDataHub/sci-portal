---
app:
  # Should be the same as backend.baseUrl when using the `app-backend` plugin.
  baseUrl: ${BACKSTAGE_URI}

backend:
  # Note that the baseUrl should be the URL that the browser and other clients
  # should use when communicating with the backend, i.e. it needs to be
  # reachable not just from within the backend host, but from all of your
  # callers. When its value is "http://localhost:7007", it's strictly private
  # and can't be reached by others.
  baseUrl: ${BACKSTAGE_URI}
  # The listener can also be expressed as a single <host>:<port> string. In this case we bind to
  # all interfaces, the most permissive setting. The right value depends on your specific deployment.
  listen: ':7007'

  auth:
    externalAccess:
      - type: static
        options:
          token: ${BACKSTAGE_BUDGET_ALERT_EVENTS_TOKEN}
          subject: budget-alert-events

  # config options: https://node-postgres.com/api/client
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      # https://node-postgres.com/features/ssl
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt

  plugins:
    provisioner:
      templateDir: '/app/templates'

catalog:
  readonly: true
  orphanStrategy: delete
  rules:
    - allow: [Component, System, API, Resource, Location, User, Group, Template]
  providers:
    github:
      # Include the following directories from PHACDataHub/sci-portal-users:
      #   ├── DMIA-PHAC/**/catalog-info.yaml
      #   ├── groups/**/*.yaml
      #   └── users/**/*.yaml
      sci-portal-users:
        organization: 'PHACDataHub'
        filters:
          repository: '^sci-portal-users$'
          branch: 'main'
        catalogPath: '{DMIA-PHAC/**/catalog-info.yaml,groups/**/*.yaml,users/**/*.yaml}'
        schedule:
          frequency: { minutes: 30 }
          timeout: { minutes: 3 }

      # Include the following directories from PHACDataHub/sci-portal:
      #   ├── backstage/catalog-info.yaml
      #   └── backstage/templates/*/template.yaml
      sci-portal:
        organization: 'PHACDataHub'
        filters:
          repository: '^sci-portal$'
          branch: 'main'
        catalogPath: '{backstage/catalog-info.yaml,backstage/templates/*/template.yaml}'
        schedule:
          frequency: { minutes: 30 }
          timeout: { minutes: 3 }

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'gke'
      projectId: ${GCP_PROJECT_ID}
      region: ${GCP_PROJECT_REGION}
      skipTLSVerify: true
      skipMetricsLookup: true
      exposeDashboard: true

auth:
  environment: production
  providers:
    google:
      production:
        clientId: ${AUTH_GOOGLE_CLIENT_ID}
        clientSecret: ${AUTH_GOOGLE_CLIENT_SECRET}

  # We configure a custom sign-in resolver until we can manage Users and Groups with Secure LDAP.
  # See https://backstage.io/docs/auth/identity-resolver#sign-in-without-users-in-the-catalog
  allowedDomains: ${AUTH_GOOGLE_ALLOWED_DOMAINS}

# Sign in without a pop-up. See https://backstage.io/docs/auth/#sign-in-configuration.
enableExperimentalRedirectFlow: true

permission:
  enabled: true
